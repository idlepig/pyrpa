{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"pyrpa utils get useful data in cli example 1: today in history we can get today in history python today_in_history.py result ----------------------------- \u65e5\u671f: 1303\u5e7402\u670822\u65e5, \u5185\u5bb9: \u5143\u671d\u7687\u5e1d\u5143\u82f1\u5b97\u5b5b\u513f\u53ea\u65a4\u00b7\u7855\u5fb7\u516b\u524c\u51fa\u751f \u65e5\u671f: 1395\u5e7402\u670822\u65e5, \u5185\u5bb9: \u660e\u671d\u5f00\u56fd\u5927\u5c06\u51af\u80dc\u901d\u4e16 \u65e5\u671f: 1403\u5e7402\u670822\u65e5, \u5185\u5bb9: \u6cd5\u56fd\u74e6\u5362\u74e6\u738b\u671d\u56fd\u738b\u67e5\u7406\u4e03\u4e16\u51fa\u751f \u65e5\u671f: 1495\u5e7402\u670822\u65e5, \u5185\u5bb9: \u67e5\u7406\u516b\u4e16\u8fdb\u5165\u90a3\u4e0d\u52d2\u65af \u65e5\u671f: 1732\u5e7402\u670822\u65e5, \u5185\u5bb9: \u7f8e\u56fd\u7b2c\u4e00\u4efb\u603b\u7edf\u4e54\u6cbb\u00b7\u534e\u76db\u987f\u51fa\u751f \u65e5\u671f: 1788\u5e7402\u670822\u65e5, \u5185\u5bb9: \u5fb7\u56fd\u54f2\u5b66\u5bb6\u4e9a\u745f\u00b7\u53d4\u672c\u534e\u51fa\u751f \u65e5\u671f: 1799\u5e7402\u670822\u65e5, \u5185\u5bb9: \u4e2d\u56fd\u6e05\u671d\u5b98\u7ec5\u3001\u8457\u540d\u8d2a\u5b98\u548c\u73c5\u4e0a\u540a\u81ea\u5c3d \u65e5\u671f: 1848\u5e7402\u670822\u65e5, \u5185\u5bb9: \u6cd5\u56fd\u201c\u4e8c\u6708\u9769\u547d\u201d\u7206\u53d1 \u65e5\u671f: 1875\u5e7402\u670822\u65e5, \u5185\u5bb9: \u6cd5\u56fd\u753b\u5bb6\u8ba9-\u5df4\u8482\u65af\u00b7\u5361\u7c73\u8036\u00b7\u67ef\u6d1b\u901d\u4e16 \u65e5\u671f: 1898\u5e7402\u670822\u65e5, \u5185\u5bb9: \u671d\u9c9c\u738b\u671d\u6444\u653f\u5174\u5ba3\u5927\u9662\u541b\u674e\u6630\u5e94\u901d\u4e16 \u65e5\u671f: 1926\u5e7402\u670822\u65e5, \u5185\u5bb9: \u6cd5\u56fd\u7b2c20\u4efb\u603b\u7edf\u5409\u65af\u5361\u5c14\u00b7\u5fb7\u65af\u5766\u51fa\u751f \u65e5\u671f: 1927\u5e7402\u670822\u65e5, \u5185\u5bb9: \u4e0a\u6d77\u5de5\u4eba\u4e3e\u884c\u7b2c\u4e8c\u6b21\u6b66\u88c5\u8d77\u4e49 \u65e5\u671f: 1942\u5e7402\u670822\u65e5, \u5185\u5bb9: \u5965\u5730\u5229\u4f5c\u5bb6\u65af\u8482\u82ac\u00b7\u8328\u5a01\u683c\u901d\u4e16 \u65e5\u671f: 1986\u5e7402\u670822\u65e5, \u5185\u5bb9: \u83f2\u5f8b\u5bbe\u4e8c\u6708\u9769\u547d\uff0c\u603b\u7edf\u8d39\u8fea\u5357\u5fb7\u00b7\u9a6c\u79d1\u65af\u4e0b\u53f0 \u65e5\u671f: 1989\u5e7402\u670822\u65e5, \u5185\u5bb9: \u4e2d\u56fd\u9769\u547d\u5bb6\u6731\u826f\u624d\u901d\u4e16\u3002 example 2: translation get chinse from english python translation.py useful result \u6709\u7528\u7684","title":"pyrpa"},{"location":"index.html#pyrpa","text":"utils get useful data in cli","title":"pyrpa"},{"location":"index.html#example-1-today-in-history","text":"we can get today in history python today_in_history.py result ----------------------------- \u65e5\u671f: 1303\u5e7402\u670822\u65e5, \u5185\u5bb9: \u5143\u671d\u7687\u5e1d\u5143\u82f1\u5b97\u5b5b\u513f\u53ea\u65a4\u00b7\u7855\u5fb7\u516b\u524c\u51fa\u751f \u65e5\u671f: 1395\u5e7402\u670822\u65e5, \u5185\u5bb9: \u660e\u671d\u5f00\u56fd\u5927\u5c06\u51af\u80dc\u901d\u4e16 \u65e5\u671f: 1403\u5e7402\u670822\u65e5, \u5185\u5bb9: \u6cd5\u56fd\u74e6\u5362\u74e6\u738b\u671d\u56fd\u738b\u67e5\u7406\u4e03\u4e16\u51fa\u751f \u65e5\u671f: 1495\u5e7402\u670822\u65e5, \u5185\u5bb9: \u67e5\u7406\u516b\u4e16\u8fdb\u5165\u90a3\u4e0d\u52d2\u65af \u65e5\u671f: 1732\u5e7402\u670822\u65e5, \u5185\u5bb9: \u7f8e\u56fd\u7b2c\u4e00\u4efb\u603b\u7edf\u4e54\u6cbb\u00b7\u534e\u76db\u987f\u51fa\u751f \u65e5\u671f: 1788\u5e7402\u670822\u65e5, \u5185\u5bb9: \u5fb7\u56fd\u54f2\u5b66\u5bb6\u4e9a\u745f\u00b7\u53d4\u672c\u534e\u51fa\u751f \u65e5\u671f: 1799\u5e7402\u670822\u65e5, \u5185\u5bb9: \u4e2d\u56fd\u6e05\u671d\u5b98\u7ec5\u3001\u8457\u540d\u8d2a\u5b98\u548c\u73c5\u4e0a\u540a\u81ea\u5c3d \u65e5\u671f: 1848\u5e7402\u670822\u65e5, \u5185\u5bb9: \u6cd5\u56fd\u201c\u4e8c\u6708\u9769\u547d\u201d\u7206\u53d1 \u65e5\u671f: 1875\u5e7402\u670822\u65e5, \u5185\u5bb9: \u6cd5\u56fd\u753b\u5bb6\u8ba9-\u5df4\u8482\u65af\u00b7\u5361\u7c73\u8036\u00b7\u67ef\u6d1b\u901d\u4e16 \u65e5\u671f: 1898\u5e7402\u670822\u65e5, \u5185\u5bb9: \u671d\u9c9c\u738b\u671d\u6444\u653f\u5174\u5ba3\u5927\u9662\u541b\u674e\u6630\u5e94\u901d\u4e16 \u65e5\u671f: 1926\u5e7402\u670822\u65e5, \u5185\u5bb9: \u6cd5\u56fd\u7b2c20\u4efb\u603b\u7edf\u5409\u65af\u5361\u5c14\u00b7\u5fb7\u65af\u5766\u51fa\u751f \u65e5\u671f: 1927\u5e7402\u670822\u65e5, \u5185\u5bb9: \u4e0a\u6d77\u5de5\u4eba\u4e3e\u884c\u7b2c\u4e8c\u6b21\u6b66\u88c5\u8d77\u4e49 \u65e5\u671f: 1942\u5e7402\u670822\u65e5, \u5185\u5bb9: \u5965\u5730\u5229\u4f5c\u5bb6\u65af\u8482\u82ac\u00b7\u8328\u5a01\u683c\u901d\u4e16 \u65e5\u671f: 1986\u5e7402\u670822\u65e5, \u5185\u5bb9: \u83f2\u5f8b\u5bbe\u4e8c\u6708\u9769\u547d\uff0c\u603b\u7edf\u8d39\u8fea\u5357\u5fb7\u00b7\u9a6c\u79d1\u65af\u4e0b\u53f0 \u65e5\u671f: 1989\u5e7402\u670822\u65e5, \u5185\u5bb9: \u4e2d\u56fd\u9769\u547d\u5bb6\u6731\u826f\u624d\u901d\u4e16\u3002","title":"example 1: today in history"},{"location":"index.html#example-2-translation","text":"get chinse from english python translation.py useful result \u6709\u7528\u7684","title":"example 2: translation"},{"location":"api_today_in_history.html","text":"API for today in history format_data ( data ) join each title by \\n Parameters: Name Type Description Default data dict json data required Returns: Type Description str formatted text Source code in pyrpa/today_in_history.py def format_data ( data : dict ) -> str : \"\"\" join each title by `\\\\n` Args: data: json data Returns: formatted text \"\"\" raw : list = [ '\u65e5\u671f: ' + i . get ( 'date' , '' ) + ', \u5185\u5bb9: ' + i . get ( 'title' , '' ) for i in data . get ( 'result' , [])] result = ' \\n ' . join ( raw ) return result gen_today_file_name () generate today json filename Returns: Type Description str today_in_history-*.json Source code in pyrpa/today_in_history.py def gen_today_file_name () -> str : \"\"\" generate today json filename Returns: today_in_history-*.json \"\"\" now = datetime . now () . strftime ( '%m- %d ' ) file_today : str = 'today_in_history- %s .json' % now return file_today get_data () data source, use requests get data Returns: Type Description dict python dict from api Source code in pyrpa/today_in_history.py def get_data () -> dict : \"\"\" data source, use requests get data Returns: python dict from api \"\"\" url = 'https://api.oick.cn/lishi/api.php' response = requests . get ( url ) . text response = json . loads ( response ) return response is_today_file_exist ( file_today ) check whether today_in_history-*.json file exist. Parameters: Name Type Description Default file_today str today json filename required Returns: Type Description bool whether file exist Source code in pyrpa/today_in_history.py def is_today_file_exist ( file_today : str ) -> bool : \"\"\" check whether today_in_history-*.json file exist. Args: file_today: today json filename Returns: whether file exist \"\"\" return os . path . exists ( file_today ) read_local_file ( file_today ) only get data once every day, read data after get data from api Parameters: Name Type Description Default file_today str local json filename required Returns: Type Description dict python dict for json data Source code in pyrpa/today_in_history.py def read_local_file ( file_today : str ) -> dict : \"\"\" only get data once every day, read data after get data from api Args: file_today: local json filename Returns: python dict for json data \"\"\" data = json . load ( open ( file_today , encoding = 'utf-8' )) return data write_local_file ( file_today , data ) store data to local file Parameters: Name Type Description Default file_today str today json filename required data dict json data required Source code in pyrpa/today_in_history.py def write_local_file ( file_today : str , data : dict ) -> None : \"\"\" store data to local file Args: file_today: today json filename data: json data \"\"\" json . dump ( data , open ( file_today , 'w' , encoding = 'utf-8' ))","title":"API for today in history"},{"location":"api_today_in_history.html#api-for-today-in-history","text":"","title":"API for today in history"},{"location":"api_today_in_history.html#pyrpa.today_in_history.format_data","text":"join each title by \\n Parameters: Name Type Description Default data dict json data required Returns: Type Description str formatted text Source code in pyrpa/today_in_history.py def format_data ( data : dict ) -> str : \"\"\" join each title by `\\\\n` Args: data: json data Returns: formatted text \"\"\" raw : list = [ '\u65e5\u671f: ' + i . get ( 'date' , '' ) + ', \u5185\u5bb9: ' + i . get ( 'title' , '' ) for i in data . get ( 'result' , [])] result = ' \\n ' . join ( raw ) return result","title":"format_data()"},{"location":"api_today_in_history.html#pyrpa.today_in_history.gen_today_file_name","text":"generate today json filename Returns: Type Description str today_in_history-*.json Source code in pyrpa/today_in_history.py def gen_today_file_name () -> str : \"\"\" generate today json filename Returns: today_in_history-*.json \"\"\" now = datetime . now () . strftime ( '%m- %d ' ) file_today : str = 'today_in_history- %s .json' % now return file_today","title":"gen_today_file_name()"},{"location":"api_today_in_history.html#pyrpa.today_in_history.get_data","text":"data source, use requests get data Returns: Type Description dict python dict from api Source code in pyrpa/today_in_history.py def get_data () -> dict : \"\"\" data source, use requests get data Returns: python dict from api \"\"\" url = 'https://api.oick.cn/lishi/api.php' response = requests . get ( url ) . text response = json . loads ( response ) return response","title":"get_data()"},{"location":"api_today_in_history.html#pyrpa.today_in_history.is_today_file_exist","text":"check whether today_in_history-*.json file exist. Parameters: Name Type Description Default file_today str today json filename required Returns: Type Description bool whether file exist Source code in pyrpa/today_in_history.py def is_today_file_exist ( file_today : str ) -> bool : \"\"\" check whether today_in_history-*.json file exist. Args: file_today: today json filename Returns: whether file exist \"\"\" return os . path . exists ( file_today )","title":"is_today_file_exist()"},{"location":"api_today_in_history.html#pyrpa.today_in_history.read_local_file","text":"only get data once every day, read data after get data from api Parameters: Name Type Description Default file_today str local json filename required Returns: Type Description dict python dict for json data Source code in pyrpa/today_in_history.py def read_local_file ( file_today : str ) -> dict : \"\"\" only get data once every day, read data after get data from api Args: file_today: local json filename Returns: python dict for json data \"\"\" data = json . load ( open ( file_today , encoding = 'utf-8' )) return data","title":"read_local_file()"},{"location":"api_today_in_history.html#pyrpa.today_in_history.write_local_file","text":"store data to local file Parameters: Name Type Description Default file_today str today json filename required data dict json data required Source code in pyrpa/today_in_history.py def write_local_file ( file_today : str , data : dict ) -> None : \"\"\" store data to local file Args: file_today: today json filename data: json data \"\"\" json . dump ( data , open ( file_today , 'w' , encoding = 'utf-8' ))","title":"write_local_file()"},{"location":"api_translation.html","text":"API for translation query ( word ) query word meaning from api Parameters: Name Type Description Default word str word need be translated required Returns: Type Description str chinese meaning for words. Source code in pyrpa/translation.py def query ( word : str ) -> str : \"\"\" query word meaning from api Args: word: word need be translated Returns: chinese meaning for words. \"\"\" url = 'https://dict.youdao.com/jsonapi?q= %s ' % word import requests response : str = requests . get ( url ) . text words : dict = json . loads ( response ) chinese : str = words . get ( 'web_trans' , {}) . get ( 'web-translation' , [])[ 0 ] . get ( 'trans' , [])[ 0 ] . get ( 'value' , '' ) return chinese read_local_file ( file_today ) only get data once every day, read data after get data from api Parameters: Name Type Description Default file_today str local json filename required Returns: Type Description Dict[str, Any] python dict from local json file Source code in pyrpa/translation.py def read_local_file ( file_today : str ) -> Dict [ str , Any ]: \"\"\" only get data once every day, read data after get data from api Args: file_today: local json filename Returns: python dict from local json file \"\"\" data = json . load ( open ( file_today , encoding = 'utf-8' )) return data","title":"API for translation"},{"location":"api_translation.html#api-for-translation","text":"","title":"API for translation"},{"location":"api_translation.html#pyrpa.translation.query","text":"query word meaning from api Parameters: Name Type Description Default word str word need be translated required Returns: Type Description str chinese meaning for words. Source code in pyrpa/translation.py def query ( word : str ) -> str : \"\"\" query word meaning from api Args: word: word need be translated Returns: chinese meaning for words. \"\"\" url = 'https://dict.youdao.com/jsonapi?q= %s ' % word import requests response : str = requests . get ( url ) . text words : dict = json . loads ( response ) chinese : str = words . get ( 'web_trans' , {}) . get ( 'web-translation' , [])[ 0 ] . get ( 'trans' , [])[ 0 ] . get ( 'value' , '' ) return chinese","title":"query()"},{"location":"api_translation.html#pyrpa.translation.read_local_file","text":"only get data once every day, read data after get data from api Parameters: Name Type Description Default file_today str local json filename required Returns: Type Description Dict[str, Any] python dict from local json file Source code in pyrpa/translation.py def read_local_file ( file_today : str ) -> Dict [ str , Any ]: \"\"\" only get data once every day, read data after get data from api Args: file_today: local json filename Returns: python dict from local json file \"\"\" data = json . load ( open ( file_today , encoding = 'utf-8' )) return data","title":"read_local_file()"}]}